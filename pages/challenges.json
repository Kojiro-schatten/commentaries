[
  {
    "rowIndex": 2,
    "challenge_name": "Pick",
    "challenge_url": "https://github.com/type-challenges/type-challenges/blob/master/questions/4-easy-pick/README.md",
    "challenge_example": "type MyPick<T, K extends keyof T> = {[key in K]: T[key]}",
    "challenge_commentary": "type MyPick<T, K extends keyof T> = {[key in K]: T[key]}\ntype cases = [\n Expect<Equal<Expected1, MyPick<Todo, 'title'>>>,\n Expect<Equal<Expected2, MyPick<Todo, 'title' | 'completed'>>>,\n // @ts-expect-error\n MyPick<Todo, 'title' | 'completed' | 'invalid'>,\n]\ninterface Todo {\n title: string\n description: string\n completed: boolean\n}\ninterface Expected1 {\n title: string\n}\n\n\nTは、TSのプレイグラウンド上ではTodoインターフェースとされている。\n\nKはExpected1,2,3インターフェースのようにTodoのkeyのどれかを持っている。\n\nkeyofを使ってオブジェクトキーを渡せば、Kはそのオブジェクトキーのいずれかを取るUnionTypeになる。\n\n \n\n最後に出てくるT[key]は、Tに対してkey型でアクセスして得られる型。keyがkeyof Tを満たすtypeであれば、\n\ntype sample = T['keeeey']\n\nなら、Tのtypeはstringになる。T['number']で数値型にアクセスしているなら、numberになる。\n\n \n\n最後に、{[key in K] の部分は mappedTypes であり、例えば\n\ntype T1 = { [P in \"x\" | \"y\"]: number };  // { x: number, y: number }\n\nと、この場合 \"x\"と\"y\"は、number型になる。\n今回、[key in K]: T[key]となってい流ので、key in Kの値は、T[key]になる。",
    "challenge_type": "type_challenges"
  },
  {
    "rowIndex": 3,
    "challenge_name": "ReadOnly",
    "challenge_url": "https://github.com/type-challenges/type-challenges/blob/master/questions/7-easy-readonly/README.md",
    "challenge_example": "type MyReadonly<K> = { readonly [key in keyof K]: K[key]}",
    "challenge_commentary": "ここに解説が入ります",
    "challenge_type": "type_challenges"
  },
  {
    "rowIndex": 4,
    "challenge_name": "Tuple to Object",
    "challenge_url": "https://github.com/type-challenges/type-challenges/blob/master/questions/11-easy-tuple-to-object/README.md",
    "challenge_example": "type TupleToObject<T extends readonly string[]> = { [K in T[number]]: K }",
    "challenge_commentary": "ここに解説が入ります",
    "challenge_type": "type_challenges"
  },
  {
    "rowIndex": 5,
    "challenge_name": "First of Array",
    "challenge_url": "https://github.com/type-challenges/type-challenges/blob/master/questions/14-easy-first/README.md",
    "challenge_example": "type First<T extends any[]> = T['length'] extends 0 ? never : T[0];",
    "challenge_commentary": "ここに解説が入ります",
    "challenge_type": "type_challenges"
  }
]